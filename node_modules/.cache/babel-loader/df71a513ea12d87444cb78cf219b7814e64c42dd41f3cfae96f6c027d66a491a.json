{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useReducer } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\nconst initialState = {\n  loading: null,\n  error: null\n};\nconst insertReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOADING\":\n      return {\n        loading: true,\n        error: null\n      };\n    case \"INSERTED_DOC\":\n      return {\n        loading: false,\n        error: null\n      };\n    case \"ERROR\":\n      return {\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const useInsertDocument = docCollection => {\n  _s();\n  const [response, dispatch] = useReducer(insertReducer, initialState);\n  //deal with memory leak\n  const [cancelled, setCancelled] = useState(false);\n  const checkCancelBeforeDispatch = action => {\n    if (!cancelled) {\n      dispatch(action);\n    }\n  };\n  const insertDocument = async document => {\n    checkCancelBeforeDispatch({\n      type: \"LOADING\",\n      payload: insertDocument\n    });\n    try {\n      const newDocument = {\n        ...document,\n        createAt: Timestamp.now()\n      };\n      const insertedDocument = await addDoc(collection(db, docCollection), newDocument);\n      checkCancelBeforeDispatch({\n        type: \"INSERTED_DOC\",\n        payload: insertDocument\n      });\n    } catch (error) {\n      checkCancelBeforeDispatch({\n        type: \"ERROR\",\n        payload: error.message\n      });\n    }\n  };\n  useEffect(() => {\n    return () => setCancelled(true);\n  }, []);\n  return {\n    insertDocument,\n    response\n  };\n};\n_s(useInsertDocument, \"aGpufD8as+miNYZKmGUYm2CUF6M=\");","map":{"version":3,"names":["useState","useEffect","useReducer","db","collection","addDoc","Timestamp","initialState","loading","error","insertReducer","state","action","type","payload","useInsertDocument","docCollection","_s","response","dispatch","cancelled","setCancelled","checkCancelBeforeDispatch","insertDocument","document","newDocument","createAt","now","insertedDocument","message"],"sources":["C:/Users/Luiz.E.Costa/Desktop/Code/Curso/miniblog/src/hooks/useInsertDocument.js"],"sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\r\nimport { db } from \"../firebase/config\";\r\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\r\n\r\nconst initialState = {\r\n    loading: null,\r\n    error: null\r\n}\r\n\r\nconst insertReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return { loading: true, error: null };\r\n        case \"INSERTED_DOC\":\r\n            return { loading: false, error: null };\r\n        case \"ERROR\":\r\n            return { loading: false, error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const useInsertDocument = (docCollection) => {\r\n    const [response, dispatch] = useReducer(insertReducer, initialState)\r\n    //deal with memory leak\r\n    const [cancelled, setCancelled] = useState(false)\r\n\r\n    const checkCancelBeforeDispatch = (action) => {\r\n        if (!cancelled) {\r\n            dispatch(action)\r\n        }\r\n    }\r\n\r\n    const insertDocument = async (document) => {\r\n        checkCancelBeforeDispatch({\r\n            type: \"LOADING\",\r\n            payload: insertDocument\r\n        })\r\n        try {\r\n            const newDocument = { ...document, createAt: Timestamp.now() }\r\n            const insertedDocument = await addDoc(\r\n                collection(db, docCollection), newDocument\r\n            )\r\n            checkCancelBeforeDispatch({\r\n                type: \"INSERTED_DOC\",\r\n                payload: insertDocument\r\n            })\r\n        } catch (error) {\r\n            checkCancelBeforeDispatch({\r\n                type: \"ERROR\",\r\n                payload: error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => setCancelled(true)\r\n    }, [])\r\n\r\n    return {insertDocument, response, }\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACvD,SAASC,EAAE,QAAQ,oBAAoB;AACvC,SAASC,UAAU,EAAEC,MAAM,EAAEC,SAAS,QAAQ,oBAAoB;AAElE,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,SAAS;MACV,OAAO;QAAEL,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACzC,KAAK,cAAc;MACf,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC;IAC1C,KAAK,OAAO;MACR,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEG,MAAM,CAACE;MAAQ,CAAC;IACpD;MACI,OAAOH,KAAK;EAAC;AAEzB,CAAC;AAED,OAAO,MAAMI,iBAAiB,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGjB,UAAU,CAACQ,aAAa,EAAEH,YAAY,CAAC;EACpE;EACA,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMsB,yBAAyB,GAAIV,MAAM,IAAK;IAC1C,IAAI,CAACQ,SAAS,EAAE;MACZD,QAAQ,CAACP,MAAM,CAAC;IACpB;EACJ,CAAC;EAED,MAAMW,cAAc,GAAG,MAAOC,QAAQ,IAAK;IACvCF,yBAAyB,CAAC;MACtBT,IAAI,EAAE,SAAS;MACfC,OAAO,EAAES;IACb,CAAC,CAAC;IACF,IAAI;MACA,MAAME,WAAW,GAAG;QAAE,GAAGD,QAAQ;QAAEE,QAAQ,EAAEpB,SAAS,CAACqB,GAAG;MAAG,CAAC;MAC9D,MAAMC,gBAAgB,GAAG,MAAMvB,MAAM,CACjCD,UAAU,CAACD,EAAE,EAAEa,aAAa,CAAC,EAAES,WAAW,CAC7C;MACDH,yBAAyB,CAAC;QACtBT,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAES;MACb,CAAC,CAAC;IACN,CAAC,CAAC,OAAOd,KAAK,EAAE;MACZa,yBAAyB,CAAC;QACtBT,IAAI,EAAE,OAAO;QACbC,OAAO,EAAEL,KAAK,CAACoB;MACnB,CAAC,CAAC;IACN;EACJ,CAAC;EAED5B,SAAS,CAAC,MAAM;IACZ,OAAO,MAAMoB,YAAY,CAAC,IAAI,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAACE,cAAc;IAAEL;EAAU,CAAC;AACvC,CAAC;AAAAD,EAAA,CAtCYF,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}